{{/* Gets the path of a secret, without the #secretKey */}}
{{- define "clean_path_secret" }}
{{- set . "type" "secret" | include "clean_path" }}
{{- end }}
{{/* Gets the secretKey of a secret, without the path */}}
{{- define "clean_path_value" }}
{{- set . "type" "value" | include "clean_path" }}
{{- end }}

{{- define "versionned-secret-name" }}
{{- $name := "placeholder" }}
{{- if kindIs "string" . }}
  {{- $name = include "clean_path_secret" (set (deepCopy $) "path" .) }}
{{- else }}
  {{- $name = include "clean_path_secret" . }}
  {{- if (int .version | default -1) | ne -1 }}
    {{- $name = printf "%s-v%d" $name (int .version) }}
  {{- end }}
{{- end }}

{{- $name }}
{{- end }}


{{/*
Usage: Is used by both clean_path_secret and clean_path_value to generate strings
---
Input:
path: path/to/secret#secretKey                         -> Will be used as a plain string
or
path: path/to/secret/with/$variable#secretKey          -> Will try to template the variables with the tpl.secret template defined below
or
path: path/to/secret/with/{{ helmVariable }}#secretKey -> Will try to template the variables with helm values

templateVars: <dict>                                   -> Will be used to template the secretKey
---
Output:
<string>
*/}}
{{- define "clean_path" }}
  {{- $result := list }}
  {{- range replace "#" "/" .path | splitList "/" }}
    {{- if hasPrefix "$" . }}
      {{- $args := dict "path" (substr 1 -1 .) "templateVars" $.templateVars "Chart" $.Chart }}
      {{- $result = (include "tpl.secret" $args) | append $result }}
    {{- else if hasPrefix "{{" . }}
      {{ fail "Helm templating inside secret path is not handled anymore" }}
    {{- else }}
      {{- $result = append $result . }}
    {{- end }}
  {{- end }}
  {{- if regexMatch "^secret$" .type }}
    {{- printf "secret/%s" (initial $result | join "/") }}
  {{- else if regexMatch "^value$" .type }}
    {{- last $result }}
  {{- end }}
{{- end }}


{{/*
Usage: Get all needed variables from .Values to generate a dict used in tpl.secret
---
Input:
path: <string>
templateVars: <dict>
---
Output:
<dict>
*/}}
{{- define "generate-template-vars" -}}
{{- dict "stack_env"      (.Values.global.env_name | default "dev")
                   "cluster_env"    (.Values.global.clusterEnv | default "dev")
                   "client"         (.Values.global.client_name | default "noclient")
                   "db"             (.Values.global.db_name | default "nodb")
                   "stack"          (.Values.global.stack_name | default $.Chart.Name)
                   "filemedia_name" (trimPrefix "medical-" (.Values.global.stack_name | default "undefined"))
                   "vault_db_name"  (.Values.vaultDbName | default .Values.global.vaultDbName)
| toJson -}}
{{- end -}}

{{/*
Usage: Templates one $variable in a secret path. Is called for every $variable present in its path
---
Input:
path: <string>
Values: ...
Chart: ...
---
Output:
<string>
*/}}
{{- define "tpl.secret" -}}
{{- $result := get .templateVars .path }}
  {{- if not $result -}}
    {{ fail (printf "Could not find secret path: %s" .path) }}
  {{- end -}}
  {{- $result }}
{{- end }}

{{- define "use_secrets" }}
{{- $key := "" }}
{{- $name := "" }}
{{- $tmp := . }}
{{- $prefix :=  .prefix | default $.Chart.Name }}
{{- range $envName, $secretPathOrObject := .secrets }}
  {{- with $tmp }}
    {{- $skip := false }}
    {{- if kindIs "string" $secretPathOrObject }}
      {{- $args := dict "path" $secretPathOrObject "templateVars" (include "generate-template-vars" $ | fromJson) }}
      {{- $key = include "clean_path_value" $args }}
      {{- $name = include "clean_path_secret" $args }}
    {{- else if kindIs "invalid" $secretPathOrObject }}
      {{- $skip = true }}
    {{- else }}
      {{- $key = include "clean_path_value" $secretPathOrObject }}
      {{- $name = include "versionned-secret-name" $secretPathOrObject }}
    {{- end }}

    {{- if not $skip }}
- name: {{ $envName }}
  valueFrom:
    secretKeyRef:
      name: {{ dict "name" $name "prefix" $prefix | include "clean-name" }}
      key: {{- $key | squote | indent 1 }}
  {{- end }}
  {{- end }}
{{- end }}
{{- end }}

{{/*
Usage:
Generates a json object containing all the secrets info, grouped by path
---
Input:
secrets:
  oneLineSecret: path/to/secret#secretKey
  templatedSecret:
    path: path/to/secret#secretKey
    template: string that contains the {% .Secrets.secretKey $}
  versionnedSecret:
    path: path/to/secret#secretKey
    version: 1
  versionnedAndTemplatedSecret:
    path: path/to/secret#secretKey
    template: string that contains the {% .Secrets.secretKey $}
    version: 1
---
Output:
path-to-secret1:
  keys:
  - key1
  - key2
  templates:
    templateName: <key-vault template>
  path: path/to/secret
  version: <int> (optional)
*/}}
{{- define "get_secrets" }}
  {{- $secrets := dict }}
  {{- $secretKey := "" }}

  {{- range $envName, $value := .secrets }}
    {{- $args := dict }}
    {{- $templates := dict }}
    {{- $version := int -1 }}

    {{- if kindIs "string" $value }}
      {{- $args = dict "path" $value "templateVars" (include "generate-template-vars" $ | fromJson) }}
      {{- $secretKey = include "clean_path_value" $args }}
      {{- $templates = dict $secretKey (printf "{%% index .Secrets \"%s\" %%}" $secretKey) }}
    {{- else }}
      {{- $args = dict "path" $value "templateVars" (include "generate-template-vars" $ | fromJson) }}
      {{- $secretKey = include "clean_path_value" $args }}

      {{- $templates = dict $secretKey (printf "{%% index .Secrets \"%s\" %%}" $secretKey)  }}
      {{- if empty $value.template | not }}
        {{- $_ := set $templates  (splitList "@" $envName | last) $value.template }}
      {{- end }}

      {{- $version = int ($value.version | default -1) }}
    {{- end }}

    {{- $path := (include "clean_path_secret" $args) }}

    {{- $name := dict "name"   $path
                      "prefix" ($.prefix | default $.Chart.Name)
                 | include "clean-name"  }}

    {{- if $version | ne -1 }}
    {{- $name = printf "%s-v%d" $name $version }}
    {{- end }}

    {{- /* If path does not exist yet, create empty entry */}}
    {{- if not (hasKey $secrets $name) }}
      {{- $_ := set $secrets $name (dict "keys" (list)
                                         "templates" (dict))
      }}
    {{- end }}

    {{- /* Get secrets dict that already exists for this path */}}
    {{- $oldVal := get $secrets $name }}

    {{- /* Append this secret's template to the secrets dict */}}
    {{- $_ := get $oldVal "templates" | mergeOverwrite $templates | set $oldVal "templates" }}

    {{- /* Append this secret's path to the secrets dict */}}
    {{- $_ := set $oldVal "path" $path }}

    {{- /* Append this secret's version to the secrets dict */}}
    {{- if $version | ne -1 }}
    {{- $_ := set $oldVal "version" $version }}
    {{- end }}

    {{- /* Append this secret's keys to the secrets dict */}}
    {{- $_ := $secretKey | append $oldVal.keys | uniq | set $oldVal "keys" | set $secrets $name }}
  {{- end }}

  {{ $secrets | toJson }}
{{- end }}

{{/*
Usage:
Adds a prefix to the secret passed as an argument
---
Input:
<secret-as-a-string>
OR
name: <secret-name>
prefix: <seccret-prefix>
...
---
Output:
<string>
*/}}
{{- define "clean-name" -}}
  {{- if kindIs "string" . }}
    {{- include "kube-name" . | printf "%s-%s" $.Release.Name }}
  {{- else }}
    {{- include "kube-name" .name | printf "%s-%s" .prefix }}
  {{- end }}
{{- end }}

{{/*
Usage:
Generates a volume to place inside a pod's config
---
Input:
<secret-as-a-string>
OR
name: <secret-name>
prefix: <secret-prefix>
...
---
Output:
<string>
*/}}
{{- define "secret-volume" -}}
  {{- range $envName, $secretData := .secrets }}

  {{- $secretName = include "versionned-secret-name" $secretData }}

- name: {{ $secretData.mountName }}
  secret:
    defaultMode: 0400
    secretName: {{ dict "name" $secretName "prefix" $.prefix | include "clean-name" }}
  {{- end -}}
{{- end -}}

{{- define "secret-volume-mount" -}}
  {{- range $envName, $secretData := . }}
- name: {{ $secretData.mountName }}
  mountPath: {{ $secretData.mountPath }}
  {{- end -}}
{{- end -}}
